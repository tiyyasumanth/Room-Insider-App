HTTP Interceptor
----------------------------------------------------------------------------------------------------------------------
This provide great way to intercept outgoing request or incoming http response.
Used to intercept and modifie the request.We can muteate the request(we can add property to our request like header).

---Need of interceptor:

Ensure theoutgoing request is https insted of http.
Set an authorization header on each request.
we can create a global error catch in case of http request fails.

---syntax:
     intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>{}

Create inerceptor:
------------------
1)Create new fileAuthheaderinterceptor

          import { Injectable } from "@angular/core";
import {HttpInterceptor, HttpErrorResponse} from "@angular/common/http"
import {catchError} from 'rxjs/operators'
import { throwError } from 'rxjs';

//Here every request will be attached with headers.


@Injectable()
export class Authheader implements HttpInterceptor{
    intercept(req: import("@angular/common/http").HttpRequest<any>, 
    next: import("@angular/common/http").HttpHandler): import("rxjs").Observable<import("@angular/common/http").HttpEvent<any>> {
        //intercept code
        //Add headers to all http request
        const authed="test heder";
        const requ=req.clone({setHeaders:{Authorization:authed}})
        
        //handeling global error
        return next.handle(requ).pipe(catchError(this.handleError));
    }

    handleError(error: HttpErrorResponse){
        console.log(error);
        return throwError(error);
       }
   
}

2)Create another sub file(unioninterceptor) to use above interceptor

   import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { Authheader } from './Authheaderinterceptor';

export const httpunionproviders=[{provide:HTTP_INTERCEPTORS, useClass:Authheader,multi:true}];

register httpunionproviders in appmodule.ts  providers: [httpunionproviders],


Note:::  When any http request occures 'Authheader' class will called.
Running Scope:::::   providers: [httpunionproviders]---->http request------->Authheader--------> http response
