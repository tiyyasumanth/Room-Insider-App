Asp.net core(1.0) mvc and web apis
-------------------------------
Asp.net 4.x is redesinged to Asp.net core 1.0 for cross-platform, hig performance,open source,cloud-based.
Asp.net core can be run in windows,linux. it is a indefendent framework.

Both MVC controller class and ASP.net web api controller class inherit from the same controller base class and returns IActionResult.

Settting up machine for ASP.net core developement 
---------------------------------------------------
editor visula studio 2017

In visula studio 2017 install .net cor cross-platform developement and launch it.
Latest SDK https://dotnet.microsoft.com/download

Creating Asp.net core web application
---------------------------------------
Visual studio-> file->new project->visual C#->.net core->ASP.net core web Application-->select empty

ASP.NET cor api
----------------
https://www.youtube.com/watch?v=fom80TujpYQ
https://www.youtube.com/watch?v=lfZHKftuQoY
https://stackblitz.com/edit/angular-7-role-based-authorization-example  --authentication in angular
https://www.javainuse.com/pcf/pcf-hello

Core main method and back ececution
----------------------------------
public static void main(string[] arg)

appsettings.json
--------------------
here we store configaration data will store like data base connections etc.

cofigaration sources:: files(appsettings.json),user secrets.environment variables, command-line arguments.

Web api project on debit card
-------------------------------
----------------------------------
program.cs: this the starting page of appication with main class
method:createwebhostbuilder to which call the statup.cs 
startup.cs: it containsConfigureServices to run dot net services


Add models folder::::::::
               Which contains all db entity models
               To add entity models right click on project click on Manage NuGet Packages, switch to Browse tab and
               search for Microsoft.EntityFrameworkCore, select the same version of asp.net core and install it
Public class Paymentdetailscontext:DbContext
{
     public Paymentdetailscontext(DbContextOptions<Paymentdetailscontext> options):base(options)
      {

      }

      public DbSet<paymentdetails> paymentdetails{get;set}     ---- this property set data to paymentdetails
}

Add another class with class properties to communicate with above class

Public class paymentdetails
{
  [Key]                                 ---------indicates this is primary column
  public int ptid {get; set}
  
  [Required]                            ---------------  inndicates this column value is required
  [Column(TypeName="nvarchar(100"))]    -------  indicates type of column
  public string CardOwnerName{get; set}

  [Required]                            
  [Column(TypeName="varchar(16"))]    
  public string CardOwnerName{get; set}

}

Adding connection string:::::::::
               in appsettings.json
                    "ConnictionString":{"DevConnection":"Server=(local)\\sqlexpress;Database=<name of db>;Trusted_Connection=true;MultipleActiveResult=true;"}

In Startup.cs ConfigarationService method add connection string name which called as dependency injection
                    Services.AddDbContext<Paymentdetailscontext>(options=>options.UseSqlServer(Configuration.GetConnectionString("DevConnection")));


Add datamodel to sql db for new db ::::::::::
                   Goto package manager console
                   ->Add-Migration "<Migration Name>"
                   ->Update-Datebase

create web api controll::::::::::::
                           On controllers folder right clik add controller(api controller with entity framework).
                           Model class:Paymentdetails        --------it is model class propertis class

                           A controller class will add with dependencys constructor of the model class and all http put delete post .
                           By default application runs with api/values url

Allowing cors origin::::::::::::::::::::
                      right click on project click on Manage NuGet Packages, switch to Browse tab and search Microsoft.AspNetCore.Cors

                      we have to add another service in middleware in service.cs of ConfigurationServices method at bottom
                      -> services.AddCors();

                      Configure cors in configure function before app.usemvc()
                      ->app.UseCors(options=>
                        options.WithOrigins("<angular url(http://localhost:7788)>")
                        .AllowAnyMethod()
                        .AllowAnyHeader());

Dependency injection:::::::  Dependency injection is a technique that follows the Dependency Inversion Principle, 
allowing for applications to be composed of loosely coupled modules. ASP.NET Core has built-in support for dependency
 injection, which makes applications easier to test and maintain.


Without creating instance for an object we can use the class.
 
                   EX: public interface Iinterface
                        {
                           string test();
                        }

                         public class test : Iinterface
                         {
                            string Iinterface.test()
                                 {
                                    return "Success";
                                 }
       
                         }

in Startup.cs ConfigureServices method add---  services.AddTransient<Iinterface, test>();

in controllers
 private readonly Iinterface _rsconfigService;

        public ValuesController(Iinterface iinterface)          ------constructor
        {
            this._rsconfigService = iinterface;
        }


                      
                         

                    
                





